
buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.3"
    id "com.diffplug.gradle.spotless" version "3.1.0"
    id "de.undercouch.download" version "3.4.3"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'javafx-gradle-plugin'


project.ext.masterfile = (new File(projectDir,'/gradle/master.gradle')).getAbsolutePath()

// Attempts to download master gradle file
if(!hasProperty('do_not_update_master_file'))
try {
    download {
        src 'https://github.com/ClearControl/master/blob/master/master.gradle?raw=true'
        dest project.ext.masterfile
        overwrite true
        onlyIfModified true
        tempAndMove true
    }
}
catch (Throwable e)
{
}

apply from: project.ext.masterfile

//***********************************************************************************
// JAVA CODE BUILDING

sourceSets {
    main
    {
        java
        { srcDir 'src/main/java' }
        resources
        { srcDir 'src/java' }
    }
    test
    {
        java
        { srcDir 'src/java' }
        resources
        { srcDir 'src/java' }
    }
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

test 
{
    testLogging.showStandardStreams = true
    testLogging
    { events "passed", "skipped", "failed" }

    exclude '**/demo/**'
    exclude '**/run/**'

    maxHeapSize = "16G"
}

dependencies 
{
    
    // JUnit:
    compile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'junit', name: 'junit', version: '4.11'

    // ClearCL:
    compile ('net.clearcontrol:simbryo:'+depver("simbryo")) {transitive= true; changing= true}

    // Py4J:
    compile group: 'net.sf.py4j', name: 'py4j', version: '0.10.7'
    
}


repositories 
{
    // main repos:
    mavenLocal()
    mavenCentral()
    maven { url "http://oss.sonatype.org/content/groups/public"} 
    maven { url "http://mvnrepository.com/artifact" }

    // ClearControl:
    maven { url  "http://dl.bintray.com/clearcontrol/ClearControl"  }

    // ClearVolume: 
    maven { url  "http://dl.bintray.com/clearvolume/ClearVolume"  }
    maven { url "http://dl.bintray.com/haesleinhuepf/snapshots" }
    
    // Sqeazy:
    maven {url  "http://dl.bintray.com/psteinb/maven" }
    
    // ImageJ repo:
    maven {url  "http://maven.imagej.net/content/repositories/releases/"}
    
    // Bioformats:
    maven {url "http://artifacts.openmicroscopy.org/artifactory/maven"}
    maven { url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases" }

}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }


//***********************************************************************************

// PUBLISHING


group   = project.ext.groupname
version = project.ext.versionsMap[project.name]


artifacts
{
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
        }
    }
}


//***********************************************************************************
// APP PACKAGING

// configure javafx-gradle-plugin
// for all available settings please look at the class "JavaFXGradlePluginExtension"
jfx {
    verbose = true
    mainClass = "pysimbryo.PySimbryoServerApplication"
    jfxAppOutputDir = "build/jfx/app"
    jfxMainAppJarName = "PySimbryo.jar"
    deployDir = "src/main/deploy"
    useEnvironmentRelativeExecutables = true

    // gradle jfxJar
    css2bin = false
    preLoader = null // String
    updateExistingJar = false
    allPermissions = false
    manifestAttributes = null // Map<String, String>
    addPackagerJar = true
    copyAdditionalAppResourcesToJar = false

    // gradle jfxNative
    identifier = null  // String - setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
    vendor = "PySimbryo"
    nativeOutputDir = "build/jfx/native"
    bundler = "ALL" // set this to some specific, if your don't want all bundlers running, examples "windows.app", "jnlp", ...
    jvmProperties = null // Map<String, String>
    jvmArgs = null // List<String>
    userJvmArgs = null // Map<String, String>
    launcherArguments = null // List<String>
    nativeReleaseVersion = project.version
    needShortcut = false
    needMenu = false
    bundleArguments = [
        // dont bundle JRE (not recommended, but increases build-size/-speed)
        runtime: null
    ]
    appName = "PySimbryo" // this is used for files below "src/main/deploy", e.g. "src/main/deploy/windows/project.ico"
    additionalBundlerResources = null // path to some additional resources for the bundlers when creating application-bundle
    additionalAppResources = null // path to some additional resources when creating application-bundle
    secondaryLaunchers = [[appName:"somethingDifferent"], [appName:"somethingDifferent2"]]
    fileAssociations = null // List<Map<String, Object>>
    noBlobSigning = false // when using bundler "jnlp", you can choose to NOT use blob signing
    customBundlers = null // List<String>
    skipNativeLauncherWorkaround205 = false

    skipNativeLauncherWorkaround124 = false
    skipNativeLauncherWorkaround167 = false
    skipJNLPRessourcePathWorkaround182 = false
    skipSigningJarFilesJNLP185 = false
    skipSizeRecalculationForJNLP185 = false

    // gradle jfxRun
    runJavaParameter = null // String
    runAppParameter = null // String

    // per default the outcome of the gradle "jarTask" will be used, set this to specify otherwise (like proguard-output)
    alternativePathToJarFile = null // String

    // to disable patching of ant-javafx.jar, set this to false
    usePatchedJFXAntLib = true

    // making it able to support absolute paths, defaults to "false" for maintaining old behaviour
    checkForAbsolutePaths = false

    // gradle jfxGenerateKeyStore
    keyStore = "src/main/deploy/keystore.jks"
    keyStoreAlias = "myalias"
    keyStorePassword = "password"
    keyPassword = null // will default to keyStorePassword
    keyStoreType = "jks"
    overwriteKeyStore = false

    certDomain = null // required
    certOrgUnit = null // defaults to "none"
    certOrg = null // required
    certState = null // required
    certCountry = null // required
}

